
********************************************************************************************************************* 1 /

ilk adım olarak katmanlı mimarinin katmanları oluşturuldu.
Blog.Web - Blog.Core - Blog.Data - Blog.Service - Blog.Entity


********************************************************************************************************************* 2 /

entity katmanında Entities klasorü oluşturuldu  içerisine Article, Category, Image Sınıfları eklendi.

ardından core katmanında Entities klasorü oluşturuldu içerisine EntityBase sınıfı eklendi bu klasor abstract olarak işaretlendi.

ardından IentityBase interface'i oluşturuldu ve EntityBase sınıfı bu interface'i implement etti.

Core katmanındaki EntityBase sınıfı 

        public virtual Guid Id { get; set; } = Guid.NewGuid();
        public virtual string CreatedBy { get; set; }
        public virtual string? ModifiedBy { get; set; }
        public virtual string? DeletedBy { get; set; }
        public virtual DateTime CreatedDate { get; set; } = DateTime.Now;
        public virtual DateTime? ModifiedDate { get; set; }
        public virtual DateTime? DeletedDate { get; set; }
        public virtual bool IsDeleted { get; set; } = false;

        bu özellikleri içeriyor.

        ve Entity Katmanındaki Article, Category, Image sınıfları EntityBase sınıfını miras alıyor.



********************************************************************************************************************* 3 /
Appsetting'ten ConnectionString'i alma ve Migrations

Blog.Data katmanına Context klasörünü oluşturduk ve AppDbContext sınıfını ekledik.

appsettings.json dosyasına ConnectionString ekledik.

program.csde builder.services.AddDbContext<AppDbContext>(options => options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));
kısmı eklendi

data ve web kısmına entityframeworkcore.tools ve design paketleri yüklendi.

ardından ise Package Manager Console'da Default Project'i Blog.Data olarak seçtik ve Add-Migration Initial komutunu çalıştırdık.
update-database komutu ile veritabanına yansıttık.



********************************************************************************************************************* 4 /
veritabanındaki veri türlerini konfigüre etmek için data kısmında mapping oluşturuldu. 
örneğin, builder.Property(x => x.Title).HasMaxLength(150) gibi

ardından ArticleMap sınıfı oluşturuldu ve bu sınıf IEntityTypeConfiguration<Article> interface'ini implement etti.
içerisine ise 
builder.HasData(new Article
            {
                Id = Guid.NewGuid(),
                Title = "Asp.Net Core Deneme Makalesi",
                Content = "Asp.Net Core Deneme Makalesi İçeriği",
                ViewCount = 15,

                CategoryId = Guid.Parse("7174F01E-FEE2-48CD-9F7E-7008C33E2631"),
                ImageId = Guid.Parse("445CC7DC-C06D-4027-9FAF-B0741AB40F35"),
                CreatedBy = "Admin Test",
                CreatedDate = DateTime.Now,
                IsDeleted = false
gibi veriler eklendi.

CategoryMap ve ImageMap için de aynı işlemler yapıldı.

en sonda ise SeedComplete Migrate edildi.




********************************************************************************************************************* 5 /
Repositories Klasorü oluşturuldu içerisine Abstract klasörü oluşturuldu ve IRepository interface'i eklendi.
ardından ise Concretes klasörü oluşturuldu ve repository sınıfları eklendi.

soyut ve somut kısımlar ayrıldı.

Task AddAsync(T entity)	             Yeni bir nesne ekler. (Create)
Task<List<T>> GetAllAsync(...)     	 Belli bir şarta göre tüm verileri çeker. (Read - Liste)
Task<T> GetAsync(...)	             Belli bir şarta göre tek bir nesne getirir. (Read - Tekil Veri)
Task<T> GetByGuidAsync(Guid id)	     ID (GUID) ile nesneyi bulur. (Read - Tekil Veri)
Task<T> UpdateAsync(T entity)	     Verilen nesneyi günceller. (Update)
Task DeleteAsync(T entity)	         Nesneyi siler. (Delete)
Task<bool> AnyAsync(...)	         Veritabanında bu şartı sağlayan bir veri var mı? kontrol eder. (Exists?)
Task<int> CountAsync(...)	         Verilen kritere uyan kaç veri var sayısını döndürür. (Count)

özetle IRepository interface'i içerisinde CRUD işlemleri tanımlandı. 
Bu kod, veri tabanı işlemlerini yönetmek için kullanılan genel bir repository arayüzüdür.
CRUD işlemlerini asenkron olarak destekler ve her metot, bir veri tabanı operasyonunu temsil eder.

Repository Kısmına gelecek olursak
Repository<T> : Generic bir repository sınıfıdır. T bir sınıf olmalıdır ve IEntityBase arayüzünü implemente etmelidir.

private DbSet<T> Table => dbContext.Set<T>(); : EF Core üzerinden ilgili tabloya erişim sağlar.

CRUD işlemlerini gerçekleştiren asenkron metotlar içerir.
---------

Task<List<T>> GetAllAsync(...)	      Belirtilen kritere göre tüm verileri getirir. (Read - Liste)
Task AddAsync(T entity)	              Yeni bir kayıt ekler. (Create)
Task<T> GetAsync(...)	              Belirtilen kritere göre tek bir nesneyi getirir. (Read - Tekil Veri)
Task<T> GetByGuidAsync(Guid id)	      ID (GUID) ile tek bir nesneyi getirir. (Read - Tekil Veri)
Task<T> UpdateAsync(T entity)	      Veriyi günceller. (Update)
Task DeleteAsync(T entity)	          Veriyi siler. (Delete)
Task<bool> AnyAsync(...)	          Veritabanında belirtilen kritere uygun bir veri var mı kontrol eder. (Exists?)
Task<int> CountAsync(...)	          Belirtilen kritere uyan kaç veri var, sayısını döndürür. (Count)

özetleyecek olursak Bu kod, EF Core ile veri tabanı işlemlerini yöneten, asenkron çalışan, generic bir repository sınıfıdır. 
CRUD işlemlerini merkezi bir noktadan yöneterek kod tekrarını azaltır ve yönetilebilirliği artırır.


Enson ise Extensions klasörü oluşturuldu ve LoadDataLayerExtensions sınıfı eklendi.

Bu kod, IRepository<T> arayüzünü Repository<T> sınıfı ile eşleştirerek bağımlılık enjeksiyonunu kolaylaştırır ve 
ASP.NET Core’un DI yapısını kullanarak merkezi bir veri erişim katmanı oluşturur.
********************************************************************************************************************* 6 /

program.cs deki services.AddDbContext<AppDbContext>(opt => opt.UseSqlServer(config.GetConnectionString("DefaultConnection")));
kısmı DataLayerExtensions classına eklendi bunun amacı program.cs dosyasını daha temiz tutmaktır.

Blog.Data katmanında UnitOfWork klasörü oluşturuldu ve IUnitOfWork interface'i eklendi.
ardından UnitOfWork sınıfı eklendi ve IUnitOfWork interface'i implement edildi.

bu yapının amacı ise 
✅ Repository katmanlarını tek bir noktadan yönetmek için kullanılır.
✅ Farklı veritabanı işlemlerinin tek bir transaction (işlem) içinde gerçekleşmesini sağlar.
✅ Asenkron ve senkron veri işlemlerini destekler.
✅ Tüm repository'leri GetRepository<T>() ile çağırarak kod tekrarını azaltır.

özetle

IUnitOfWork, repository'leri yöneten ve tüm veritabanı işlemlerini tek bir merkezden kontrol eden bir yapıdır. 
SaveAsync() ile değişiklikleri asenkron kaydederken, GetRepository<T>() ile farklı varlıklar için repository nesnesi sağlar. 



********************************************************************************************************************* 7 /

Blog.Service katmanında Services klasörü oluşturuldu içerisine Abstractions klasörü ve Concrete klasörü eklendi.

Abstractions klasörü içerisine IArticleService interface'i eklendi.
Concrete klasörü içerisine ArticleService sınıfı eklendi ve IArticleService interface'i implement edildi.

Ardından ise Extensions klasörü oluşturuldu ve ServiceLayerExtensions sınıfı eklendi.
sonra program.cs dosyasına LoadServiceLayerExtensions() eklendi.

sonra ise homecontroller içersindee IArticleService interface'i enjekte edildi ve kullanıldı.
test amaçlı proje çalıştırıldı ve sorunsun veriler geldi.





********************************************************************************************************************* 8 /
program.cs de şu değişikler yapıldı

app.UseEndpoints(endpoints =>
{
    endpoints.MapAreaControllerRoute(
    name: "Admin",
    areaName: "Admin",
    pattern: "Admin/{controller=Home}/{action=Index}/{id?}");

    endpoints.MapDefaultControllerRoute();

});
ardından;

Blog.Web katmanında Areas Adında bir klasör oluşturuldu ve içerisine Admin klasörü oluşturuldu.
Admin klasörü içerisine Controllers klasörü oluşturuldu ve içerisine HomeController eklendi.
aynı şekilde admin klasörü içerisine Views klasörü oluşturuldu 
ve ardından Models klasörünü oluşturduk
Views Klasörü içerisine Shared klasörü oluşturuldu ve içerisine _ViewStart ve _ViewImports kısmı eklendi.
Home klasörrü ve _Layout kısımları HomeController içerisindeki Index'e Sağ tıklayarak AddView kısmı otomatik oluşturuldu.

Enson RazorRuntimeCompilation paketini projeye dahil ettik bu paket sayesinde 
projeyi yeniden çalıştırmadan yapılan değişiklikler anında yansıtılır.



********************************************************************************************************************* 9 /


admin template eklendi ve Layout mantığı anlatıldı












********************************************************************************************************************* 10 /
Projeye AutoMapper Eklendi ve Kullanıldı

Blog.Entity katmanına Dtos klasörü oluşturuldu ve Ardından Articles Dosyası oluşturuldu ve içerisine ArticleDto sınıfı eklendi.

Blog.Service katmanına AutoMpapper klasörü oluşturuldu ve içerisine Article Klasörü oluşturuldu içerisine 
ArticleProfile classı  eklendi.
AutoMapper kütüphanesi, iki nesne arasında veri eşleştirmesi yapmamızı sağlar.
Bu sayede, veritabanından gelen verileri, DTO’lara dönüştürerek,
DTO’ları kullanarak verileri sunucuya gönderirken, sunucudan gelen verileri de DTO’lara dönüştürerek kullanabiliriz.

AutoMapper kütüphanesini kullanabilmek için, AutoMapper.Extensions.Microsoft.DependencyInjection paketini projeye eklememiz gerekmektedir.
Ardından, AutoMapper kütüphanesini projeye eklememiz gerekmektedir.

Extensions klasörü içerisine  
var assembly = Assembly.GetExecutingAssembly();
services.AddAutoMapper(assembly);

kodları eklendi. assembly değişkeni, projede bulunan tüm assembly’leri temsil eder. 

ardından projenin Index.cshtml dosyasında bulunan
@model List<Article>
kısmını
@model List<ArticleDto>

olarak değiştirdik 

ardından ArticleService.cs içerisindeki GetAllArticleAsync() metodu içerisinde gerekli değşiklikler yapıldı.




********************************************************************************************************************* 11 /

Microsoft.AspNetCore.Identity.EntityFrameworkCore paketi yüklendi ve 
IdentityDbContext(AppDbContext sınıfında(Data Katmanı)) sınıfı eklendi.

IdentityDbContext sınıfı, ASP.NET Core Identity için gerekli olan veritabanı tablolarını oluşturur.

Entity Katmanında Entities klasörü içerisine AppRole,AppRoleClaim,AppUser,AppUserClaim,AppUserLogin,
AppUserRole,AppUserToken sınıfları eklendi.

AppUser sınıfı, IdentityUser sınıfından miras alır ve IEntityBase arayüzünü implement eder.
AppRole sınıfı, IdentityRole sınıfından miras alır ve IEntityBase arayüzünü implement eder.
AppRoleClaim sınıfı, IdentityRoleClaim sınıfından miras alır ve IEntityBase arayüzünü implement eder.
AppUserClaim sınıfı, IdentityUserClaim sınıfından miras alır ve IEntityBase arayüzünü implement eder.
AppUserLogin sınıfı, IdentityUserLogin sınıfından miras alır ve IEntityBase arayüzünü implement eder.
AppUserRole sınıfı, IdentityUserRole sınıfından miras alır ve IEntityBase arayüzünü implement eder.
AppUserToken sınıfı, IdentityUserToken sınıfından miras alır ve IEntityBase arayüzünü implement eder.

AppDbContext sınıfı içerisinde gerekli özelleştirmeler yapıldı ve IdentityDbContext sınıfından miras alındı.
(public class AppDbContext : IdentityDbContext<AppUser, AppRole, Guid, AppUserClaim, 
AppUserRole, AppUserLogin, AppRoleClaim, AppUserToken>) gibi

Mapping kısmında ise 
UserMap sınıfı oluşturuldu ve IEntityTypeConfiguration<AppUser> interface'i implement edildi.
RoleMap sınıfı oluşturuldu ve IEntityTypeConfiguration<AppRole> interface'i implement edildi.
UserClaimMap sınıfı oluşturuldu ve IEntityTypeConfiguration<AppUserClaim> interface'i implement edildi.
UserRoleMap sınıfı oluşturuldu ve IEntityTypeConfiguration<AppUserRole> interface'i implement edildi.
UserLoginMap sınıfı oluşturuldu ve IEntityTypeConfiguration<AppUserLogin> interface'i implement edildi.
RoleClaimMap sınıfı oluşturuldu ve IEntityTypeConfiguration<AppRoleClaim> interface'i implement edildi.
UserTokenMap sınıfı oluşturuldu ve IEntityTypeConfiguration<AppUserToken> interface'i implement edildi.

https://learn.microsoft.com/tr-tr/aspnet/core/security/authentication/customize-identity-model?view=aspnetcore-8.0
sitesinden identity model özelleştirmeleri kopyalandı ve tüm sınıflara eklendi.

user admin ve superadmin rolleri eklendi ve seed işlemi yapıldı.

son olarak veriler migrate edilerel veritabanına yansıtıldı.

********************************************************************************************************************* 12 /

program.cs de cookie özelleştirmeleri yapıldı bunlar ise şöyle

builder.Services.AddSession();

builder.Services.AddIdentity<AppUser, AppRole>(opt =>
{

    opt.Password.RequireNonAlphanumeric = false;
    opt.Password.RequireUppercase = false;
    opt.Password.RequireLowercase = false;

})

.AddRoleManager<RoleManager<AppRole>>()
.AddEntityFrameworkStores<AppDbContext>()
.AddDefaultTokenProviders();

builder.Services.ConfigureApplicationCookie(config =>
{
    config.LoginPath = new PathString("/Admin/Auth/Login");
    config.LogoutPath = new PathString("/Admin/Auth/Logout");
    config.Cookie = new CookieBuilder
    {
        Name = "BlogProject",
        HttpOnly = true,
        SameSite = SameSiteMode.Strict,
        SecurePolicy = CookieSecurePolicy.SameAsRequest//SecurePolicy = CookieSecurePolicy.Always olduğunda tüm istekler ile girilir http https ve diğerleri farketmez ama SameAsRequest olduğunda http ve https destekler

    };
    config.SlidingExpiration = true;
    config.ExpireTimeSpan = TimeSpan.FromDays(7);
    config.AccessDeniedPath = new PathString("/Admin/Auth/AccessDenied");
});

app.UseSession();
app.UseAuthentication();


aralarında başka kodlar var ama sadece yapılan değişikler bunlar 
ardından ise

Blog.Entity Katmanında 

Article.cs, AppUser.cs, Image.cs sınıfında gerekli değişikler yapıldı 

Mappings Klasoründe UserId ve ImageId'ler eklendi

Migration'lar silindi ve yeni migration oluşturuldu bunun nedeni ise cascade için 
      
********************************************************************************************************************* 13 /

Login ve Logout kısımları yapıldı AuthController oluşturuldu 

Dto Olarak UserLoginDto Oluşturuldu

Login.cshtml dosyası oluşturuldu 

Login.cshtml ve _Layout dosyasında asp actionları verilip gerekli değişikler verildi







********************************************************************************************************************* 14 /



admin template sidebar kısmında düzenlemeler yapıldı



********************************************************************************************************************* 15 /

datatable için cdn eklendi ve js klasörü içerisine articeIndex.js oluşturuldu 

Areas içerisinde Controllers klasörü içerisine ArticleControlleri oluşturuldu 
Indexinin içerisin table yapısı eklendi ve gerekli değişiklikler yapıldı.
ArticleDto kısmında gerekli değişiklikler yapıldı
DTOs klasöründe Categries klasörü oluşrturuldu ve CategoryDto sınıfı eklendi.

ArticleService ve IArticle Service içerisine gerekli değişiklikler yapıldı.(Metod ismi değişti(GetAllArticleAsync 
iken ismi (GetAllArticlesWithCategoryNonDeletedAsync) olarak değişti )) bu değişiklik diğer controllerda ismi değiştirilerek
güncellendi.





********************************************************************************************************************* 16 /

ArticleController'da Add kısmı oluşturuldu ve gerekli değişiklikler yapıldı.

Add.cshtml dosyası oluşturuldu ve gerekli değişiklikler yapıldı.

ArticleAddDto sınıfı oluşturuldu ve gerekli değişiklikler yapıldı.

ArticleAddDto sınıfına Title, Content, CategoryId, ve list olarak Categories eklendi.

Blog.Service katmanında ICategoryService interface'i oluşturuldu ve ICategoryService interface'i implement edildi.
CategoryService sınıfı oluşturuldu ve gerekli değişiklikler yapıldı.
CategoryService sınıfında GetAllCategoriesNonDeletedAsync() metodu oluşturuldu ve gerekli değişiklikler yapıldı.

ardından ise Extension kısmına services.AddScoped<ICategoryService, CategoryService>(); eklendi

add.cshtml dosyasında CategoryId kısmı için select kısmı eklendi ve gerekli değişiklikler yapıldı .


********************************************************************************************************************* 17 /

ArticleUpdateDto oluşturuldu ve gerekli değişiklikler yapıldı içerisine 
ArticleAddDto sınıfından farklı olarak public Guid Id { get; set; } kısmı eklendi çünkü güncelleme kısmı id ye göre yapılacak.

AutoMapper kısmında ise ArticleProfile.cs içerisine 
CreateMap<ArticleUpdateDto, Article>().ReverseMap();
CreateMap<ArticleUpdateDto, ArticleDto>().ReverseMap();
kısımları eklendi.

ArticleController içerisine Update metodu eklendi ve gerekli değişiklikler yapıldı.
Update.cshtml dosyası oluşturuldu ve gerekli değişiklikler yapıldı.

ArticleService içerisine GetArticlesWithCategoryNonDeletedAsync ve
UpdateArticleAsync metodları eklendi ve gerekli değişiklikler yapıldı.

IArticleService içerisine UpdateArticleAsync ve
GetArticlesWithCategoryNonDeletedAsync metodu eklendi ve gerekli değişiklikler yapıldı.









********************************************************************************************************************* 18 /

ArticleController içerisine Delete metodu eklendi ve gerekli değişiklikler yapıldı.

ArticeleService içerisine DeleteArticleAsync metodu eklendi ve gerekli değişiklikler yapıldı.
IArticleService içerisine DeleteArticleAsync metodu eklendi ve gerekli değişiklikler yapıldı.

Delete metodu için bir .cshtml dosyası oluşturmadık silme işlemini article'ın index kısmında yaptık.



********************************************************************************************************************* 19 /
Entities içerisindeki Article.cs içerisinde Constructor'lar eklendi ve içerisine 
public Article()
        {
            
        }

        public Article(string title, string content,Guid userId, Guid categoryId, Guid imageId)
        {
            Title = title;
            Content = content;
            UserId = userId;
            CategoryId = categoryId;
            ImageId = imageId;

        }

yukarıdaki gibi constructor'lar eklendi.

ArticleService içerisinde ise
 public async Task CreateArticleAsync(ArticleAddDto articleAddDto)
      {
         var userId = Guid.Parse("8CCA96CD-DB26-45F5-856C-443FFEDBF79A");
         var imageId = Guid.Parse("445CC7DC-C06D-4027-9FAF-B0741AB40F35");

         var article = new Article(articleAddDto.Title, articleAddDto.Content, userId,articleAddDto.CategoryId,imageId );
kısımlar eklendi 

ctor kısmı Category.cs ve Image.cs kısmı içinde eklendi.

ctorlar sayesinde kod tekrarını azaltmış olduk.
ctor'un içerisine parametre olarak gelen değerler, sınıfın özelliklerine atanır.
Bu sayede, sınıfın özelliklerini başlatmak için daha az kod yazmamız gerekir.
Bu, kodun okunabilirliğini artırır ve hata yapma olasılığını azaltır.



********************************************************************************************************************* 20 /
Blog.Service katmanında FluentValidations Klasörü oluşturuldu ve içerisine ArticleValidator sınıfı eklendi.
ServiceLayerExtensions içerisine 
 services.AddControllersWithViews().AddFluentValidation(opt =>
            {
                opt.RegisterValidatorsFromAssemblyContaining<ArticleValidator>();
                opt.DisableDataAnnotationsValidation = true;
                opt.ValidatorOptions.LanguageManager.Culture = new CultureInfo("tr-TR");
                //opt.RegisterValidatorsFromAssemblyContaining<CategoryValidator>();
            });
kısmı eklendi 
ardından Extensions klasörüne FluentValidationExtensions sınıfı eklendi.

Ardından ArticleController içerisine FluentValidation eklendi ve gerekli değişiklikler yapıldı.
AddArticle ve UpdateArticle metotları için FluentValidation eklendi ve gerekli değişiklikler yapıldı.

********************************************************************************************************************* 21 /

Blog.Web Katmanında ResultMessage klasörü oluşturuldu ve içerisine Messages.cs sınıfı eklendi.
içerisine ise 
 public static class Article
        {
            public static string Add(string articleTitle)
            {
                return $"{articleTitle} Başlıklı Makale Başarıyla Eklendi.";
            }
            public static string Update(string articleTitle)
            {
                return $"{articleTitle} Başlıklı Makale Başarıyla Güncellenmiştir.";
            }
            public static string Delete(string articleTitle)
            {
                return $"{articleTitle} Başlıklı Makale Başarıyla Silinmiştir.";
            }
        }
eklendi

ardından ArticleService ve IArticleService içerisinde gerekli değişiklikler yapıldı.

son olarak ise ArticleController içerisine gerekli değişiklikler yapıldı.
ve Messages.cs sınıfı kullanıldı.








********************************************************************************************************************** 22 /

ClaimPrincipial Eklendi 
Blog.Service katmanında Extensions klasörü içerisine LoggedInUserExtensions sınıfı eklendi.
ArticleService ve Article.cs içerisinde gerekli değişiklikler yapıldı.










*********************************************************************************************************************** 23 /















*********************************************************************************************************************** 24 /













************************************************************************************************************************ 25 /



















************************************************************************************************************************ 26 /

